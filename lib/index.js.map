{"version":3,"sources":["../src/index.js"],"names":["log","ctx","next","request","response","time","Date","now","statusCode","status","responseTime","Math","ceil","requestLog","toISOString","response_time","req","method","toUpperCase","url","headers","accept","host","ip","res","console","info","JSON","stringify"],"mappings":";;;;;;;;;;;AAAO,IAAMA,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,OADS,GACaF,GADb,CACTE,OADS,EACAC,QADA,GACaH,GADb,CACAG,QADA;AAEXC,YAAAA,IAFW,GAEJC,IAAI,CAACC,GAAL,EAFI;;AAAA,kBAIb,OAAOL,IAAP,KAAgB,UAJH;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKTA,IAAI,EALK;;AAAA;AAMfM,YAAAA,UAAU,GAAGJ,QAAQ,CAACK,MAAtB;AANe;AAAA;;AAAA;AAQf;AACAD,YAAAA,UAAU,GAAGN,IAAI,CAACM,UAAlB;;AATe;AAWXE,YAAAA,YAXW,GAWIC,IAAI,CAACC,IAAL,CAAUN,IAAI,CAACC,GAAL,KAAaF,IAAvB,CAXJ;AAYXQ,YAAAA,UAZW,GAYE;AACjBR,cAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASD,IAAT,EAAeS,WAAf,EADW;AAEjBC,cAAAA,aAAa,EAAEL,YAFE;AAGjBM,cAAAA,GAAG,EAAE;AACHC,gBAAAA,MAAM,EAAEd,OAAO,CAACc,MAAR,CAAeC,WAAf,EADL;AAEHC,gBAAAA,GAAG,EAAEhB,OAAO,CAACgB,GAFV;AAGHC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,MAAM,EAAElB,OAAO,CAACiB,OAAR,CAAgBC,MADjB;AAEPC,kBAAAA,IAAI,EAAEnB,OAAO,CAACiB,OAAR,CAAgBE,IAFf;AAGP,gCAAcnB,OAAO,CAACiB,OAAR,CAAgB,YAAhB,CAHP;AAIP,qCAAmBjB,OAAO,CAACiB,OAAR,CAAgB,iBAAhB,KAAsCjB,OAAO,CAACoB;AAJ1D;AAHN,eAHY;AAajBC,cAAAA,GAAG,EAAE;AACHhB,gBAAAA,UAAU,EAAVA;AADG;AAbY,aAZF;AA6BjBiB,YAAAA,OAAO,CAACC,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAef,UAAf,CAAb;;AA7BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAHb,GAAG;AAAA;AAAA;AAAA,GAAT;;;;eA+BQ,oBAAM;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAO,kBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACCF,GAAG,CAACC,GAAD,EAAMC,IAAN,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGD,C","sourcesContent":["export const log = async (ctx, next) => {\n  const { request, response } = ctx;\n  const time = Date.now();\n  let statusCode;\n  if (typeof next === \"function\") {\n    await next();\n    statusCode = response.status;\n  } else {\n    // next is an error object;\n    statusCode = next.statusCode;\n  }\n  const responseTime = Math.ceil(Date.now() - time);\n  const requestLog = {\n    time: new Date(time).toISOString(),\n    response_time: responseTime,\n    req: {\n      method: request.method.toUpperCase(),\n      url: request.url,\n      headers: {\n        accept: request.headers.accept,\n        host: request.headers.host,\n        \"user-agent\": request.headers[\"user-agent\"],\n        \"x-forwarded-for\": request.headers[\"x-forwarded-for\"] || request.ip\n      }\n    },\n    res: {\n      statusCode\n    }\n  };\n  console.info(JSON.stringify(requestLog));\n};\nexport default () => {\n  return async (ctx, next) => {\n    await log(ctx, next);\n  };\n};\n"],"file":"index.js"}